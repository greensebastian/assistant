@using System.Globalization
@using ItineraryManager.Domain.Itineraries
@using Newtonsoft.Json
@inject ItineraryService ItineraryService;
@inject ISnackbar Snackbar;
@inject NavigationManager Navigation;

<MudCard>
    <MudCardHeader>
        <h2>@Itinerary.Name</h2>
    </MudCardHeader>
    
        @if (Itinerary.Activities.Any())
        {
            <MudCardContent Class="pl-0">
                <MudTimeline Class="pt-4" TimelineOrientation="TimelineOrientation.Vertical" TimelinePosition="TimelinePosition.Start">
                    @foreach (var activity in Itinerary.Activities)
                    {
                        <MudTimelineItem Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
                            <MudCard>
                                <MudCardHeader Class="flex-column align-start">
                                    <h3>@activity.Name</h3>
                                    <p>@activity.Start.Time.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture) to @activity.End.Time.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture)</p>
                                </MudCardHeader>
                                <MudCardContent Class="pt-0">
                                    <MudText Class="pb-2">@activity.Description</MudText>
                                    <MudGrid Class="flex-nowrap s-flex-wrap justify-space-between align-center">
                                        <MudItem Class="flex-1">
                                            <MudLink Href="@activity.Start.Place.Uri" Target="_blank">@activity.Start.Place.Name</MudLink>
                                            <p>@activity.Start.Place.Description</p>
                                        </MudItem>
                                        <MudItem Class="flex-0 s-d-none"><MudIcon Icon="@Icons.Material.Outlined.ArrowForward"/></MudItem>
                                        <MudItem Class="flex-1">
                                            <MudLink Href="@activity.End.Place.Uri" Target="_blank">@activity.End.Place.Name</MudLink>
                                            <p>@activity.End.Place.Description</p>
                                        </MudItem>
                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        </MudTimelineItem>
                    }
                </MudTimeline>
            </MudCardContent>
        }
        else
        {
            <MudCardContent>
                <MudText>Prompt for trip suggestions to add activities to you itinerary!</MudText>
            </MudCardContent>
        }
</MudCard>

<MudCard Class="mt-4">
    <MudCardHeader>
        <h2>Suggested changes</h2>
    </MudCardHeader>
    <MudCardContent>
        <pre>@JsonConvert.SerializeObject(SuggestedChanges, Formatting.Indented)</pre>
    </MudCardContent>
</MudCard>

<MudForm Class="mt-4" Spacing="2" @ref="@Form" Model="@Model">
    @if (WaitingForResponse)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
    }
    <MudTextField @bind-Value="Model.SuggestionPrompt" For="@(() => Model.SuggestionPrompt)"/>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await SuggestChanges())" Disabled="WaitingForResponse">Suggest changes</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="@(async () => await ApplyChanges())" Disabled="WaitingForResponse || SuggestedChanges.Count == 0">Apply changes</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(async () => await DeleteItinerary())" Disabled="WaitingForResponse">Delete itinerary</MudButton>
</MudForm>

@code {
    [Parameter]
    public required Itinerary Itinerary { get; set; }

    private bool WaitingForResponse { get; set; } = false;

    private List<IItineraryChange> SuggestedChanges { get; set; } = new();

    private MudForm Form { get; set; } = new();

    private ChangeItineraryFormModel Model { get; } = new();

    public class ChangeItineraryFormModel
    {
        [Label("Suggest change to itinerary")] public string SuggestionPrompt { get; set; } = "";
    }
    
    private async Task SuggestChanges()
    {
        await Form.Validate();

        if (Form.IsValid)
        {
            WaitingForResponse = true;
            var result = await ItineraryService.RequestChangeSuggestions(Itinerary.Id, Model.SuggestionPrompt, CancellationToken.None);
            WaitingForResponse = false;
            if (result.IsSuccess) SuggestedChanges = result.Value.ToList();
            else Snackbar.Add(string.Join("\n", result.Reasons), Severity.Error);
        }
    }
    
    private async Task ApplyChanges()
    {
        WaitingForResponse = true;
        var result = await ItineraryService.ApplyChanges(Itinerary.Id, SuggestedChanges, CancellationToken.None);
        WaitingForResponse = false;
        if (result.IsFailed)
        {
            Snackbar.Add(string.Join("\n", result.Reasons), Severity.Error);
        }
        else
        {
            Snackbar.Add("Successfully applied changes!", Severity.Success);
            SuggestedChanges = new();
            Model.SuggestionPrompt = "";
            Itinerary = result.Value;
        }
    }
    
    private async Task DeleteItinerary()
    {
        WaitingForResponse = true;
        var result = await ItineraryService.Delete(Itinerary.Id, CancellationToken.None);
        WaitingForResponse = false;
        if (result.IsFailed)
        {
            Snackbar.Add(string.Join("\n", result.Reasons), Severity.Error);
        }
        else
        {
            Navigation.NavigateTo("/Itineraries");
            Snackbar.Add("Successfully deleted itinerary!", Severity.Success);
        }
    }
}